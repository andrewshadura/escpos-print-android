def keystoreProperties = new Properties()
try {
    def keystorePropertiesFile = rootProject.file("signing.properties")
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} catch (FileNotFoundException ignored) {
    println 'signing.properties file was not found, no release builds will be available'
    // Put dummy values so that the debug builds work
    keystoreProperties['storeFile'] = rootProject.file('build.gradle') // bogus file, I know
    keystoreProperties['keyAlias'] = ''
    keystoreProperties['storePassword'] = ''
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.github.triplet.play'

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
    }

    defaultConfig {
        applicationId "me.shadura.escposprint"
        minSdkVersion 19
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 24
        versionName "1.6.8"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
        }
    }

    flavorDimensions "version"

    productFlavors {
        free {
            versionNameSuffix '-free'
        }
        full {
            applicationIdSuffix '.plus'
            versionNameSuffix '-plus'
        }
    }
}

dependencies {
    implementation 'javax.jmdns:jmdns:3.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'junit:junit:4.12'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-design:$anko_version"
    implementation 'com.tom_roush:pdfbox-android:1.8.10.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.hypertrack:hyperlog:0.0.9'

    implementation "androidx.core:core-ktx:$androidx_version"
    implementation "com.mikepenz:aboutlibraries:7.0.3"
    implementation 'androidx.cardview:cardview:1.0.0'
}

apply plugin: 'jacoco'
apply plugin: 'kotlin-android-extensions'
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

play {
    def envTrack = System.getenv('PLAY_STORE_RELEASE_CHANNEL')
    if ("production" == envTrack || "beta" == envTrack || "alpha" == envTrack || "rollout" == envTrack) {
        track = envTrack
    } else {
        println "The PLAY_STORE_RELEASE_CHANNEL environment variable is invalid, it was ignored"
    }
    jsonFile = rootProject.file('GooglePlayAPI.json')
}
